%nolist; %include 'cc_sys_defs.incl.pl1';         %list;
%nolist; %include 'cc_sys_strux.incl.pl1';        %list;
%nolist; %include 'cc_message_defs.incl.pl1';     %list;
%nolist; %include 'cc_messages_dcls.incl.pl1';    %list;
%nolist; %include 'cc_regionproc_dcls.incl.pl1';  %list;
%nolist; %include 'cc_actions_dcls.incl.pl1';     %list;
%nolist; %include 'cc_helpers_dcls.incl.pl1';     %list;
%nolist; %include 'cc_misc_dcls.incl.pl1';        %list;
%nolist; %include 'cc_class_defs.incl.pl1';       %list;

declare god_tool_revisited         entry;
declare magic_opener_revisited     entry;

/* declare lottery_revisited          entry; */

%replace NUMBER_OF_REPLYS by 2; /*This should GROW*/
declare reply_actions(NUMBER_OF_REPLYS) entry variable external;
declare reply_strings(NUMBER_OF_REPLYS) character(114) varying static init(
          'Edit:',
               /* 1 = God Tool */
          'Yes?'
               /* 2 = Magic Opener */
/*        'Enter your 3 digit number:'  #3 removed 3/29/89
                  3 = Lottery */
);

/*
 *   class_avatar.pl1
 *
 *   Avatar object behavior module for Habitat.
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   8-April-1986
 */

%replace SIT_GROUND by 132;
%replace SIT_CHAIR by 133;
%replace SIT_FRONT by 157;
%replace STAND_FRONT by 146;
%replace STAND_LEFT by 251;
%replace STAND_RIGHT by 252;
%replace STAND by 129;
%replace FACE_LEFT by 254;
%replace FACE_RIGHT by 255;

%replace COLOR_POSTURE by 253;

initialize_class_avatar: procedure;

     %replace AVATAR_REQUESTS by 14;

     declare a(0:AVATAR_REQUESTS) entry based;
     declare class_avatar_actions pointer;
     declare 1 avatar based %include 'struct_avatar';

     declare I binary(15) static initial(CLASS_AVATAR);

     Class_Table(I).capacity = AVATAR_CAPACITY;
     Class_Table(I).max_requests = AVATAR_REQUESTS;
     Class_Table(I).alloc_size = size(avatar);
     Class_Table(I).pc_state_bytes = 6;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = true;
     Class_Table(I).filler = false;

     allocate a set(class_avatar_actions);
     Class_Table(I).actions = class_avatar_actions;

     Class_Table(I).actions->a(HELP) = avatar_IDENTIFY;     /* 0 */
     Class_Table(I).actions->a(1) = illegal;                /* 1 */
     Class_Table(I).actions->a(2) = illegal;                /* 2 */
     Class_Table(I).actions->a(3) = illegal;                /* 3 */
     Class_Table(I).actions->a(GRAB) = avatar_GRAB;         /* 4 */
     Class_Table(I).actions->a(HAND) = avatar_HAND;         /* 5 */
     Class_Table(I).actions->a(POSTURE) = avatar_POSTURE;   /* 6 */
     Class_Table(I).actions->a(SPEAK) = avatar_SPEAK;       /* 7 */
     Class_Table(I).actions->a(WALK) = avatar_WALK;         /* 8 */
     Class_Table(I).actions->a(NEWREGION) = avatar_NEWREGION;/* 9 */
     Class_Table(I).actions->a(DISCORPORATE) = avatar_DISCORPORATE;/*10 */
     Class_Table(I).actions->a(ESP) = avatar_ESP;           /* 11 */
     Class_Table(I).actions->a(SIT) = avatar_SITORSTAND;    /* 12 */
     Class_Table(I).actions->a(TOUCH) = avatar_TOUCH;       /* 13 */
     Class_Table(I).actions->a(FNKEY) = avatar_FNKEY;     /* 14 */

end initialize_class_avatar;

avatar_DISCORPORATE: procedure;
     if (holding_class(CLASS_MAGIC_LAMP)) then do;
          if (ObjList(avatar.contents->element(HANDS))->object.gr_state =
                    MAGIC_LAMP_GENIE) then
               call object_say(S_PAC, self.noid, 'You can''t turn into a spectator while you are holding the Genie.');
     end; else if (holding_restricted_object(avatarptr, HANDS)) then do;
          call object_say(S_PAC, self.noid, 'You can''t turn into a spectator while you are holding that.');
     end; else if (holding_restricted_object(avatarptr, HEAD)) then do;
          call object_say(S_PAC, self.noid, 'You can''t turn into a spectator while you are wearing that head.');
     end; else do;
          call lights_off(avatarptr);
          call switch_to_ghost;
          return;
     end;
     call r_msg_1(E_PAC, FAILURE);
end avatar_DISCORPORATE;

avatar_GRAB: procedure;
     declare item_noid binary(15);
     declare 1 self based(selfptr) %include 'struct_avatar';
     declare 1 item based(itemptr) %include 'struct_gen_object';
     declare itemptr pointer;

     item_noid = NULL;
     if (empty_handed(avatarptr) & ^empty_handed(selfptr)) then do;
          item_noid = self.contents->element(HANDS);
          itemptr = ObjList(item_noid);
          if (^grabable(itemptr)) then do;
               call r_msg_1(NORM, NULL);
               if (current_region.nitty_bits(STEAL_FREE)) then
                    call object_say(NORM, self.noid,'This is a theft-free zone.');
               return;
          end;
          if (^UserList(self.avatarslot)->player.online) then do;
               call r_msg_1(NORM, NULL);
               return;
          end;
          if (^ change_containers(item_noid, avatar.noid, HANDS, true)) then do;
               call r_msg_1(NORM, NULL);
               return;
          end;
          call n_msg_1(avatarptr, GRABFROM$, self.noid);
/*        call inc_record(avatarptr, HS$grabs); */
     end;
     call r_msg_1(NORM, item_noid);
end avatar_GRAB;

avatar_HAND: procedure;
     declare success binary(15);
     declare item_noid binary(15);
     declare 1 self based(selfptr) %include 'struct_avatar';

     if (self.class = CLASS_MAGIC_LAMP & self.gr_state =
               MAGIC_LAMP_GENIE) then do;
          call object_say(NORM, item_noid, 'You can''t give away the Genie!');
          success = FAILURE;
     end; else if (^empty_handed(avatarptr) & empty_handed(selfptr) &
               self.container = THE_REGION) then do;
          success = SUCCESS;
          item_noid = avatar.contents->element(HANDS);
          if (^change_containers(item_noid, self.noid, HANDS, true)) then
               success = FAILURE;
          else do;
               self.activity = STAND;
               self.gen_flags(MODIFIED) = true;
               call n_msg_1(selfptr, GRABFROM$, avatar.noid);
          end;
     end; else do;
          success = FAILURE;
     end;
     call r_msg_1(NORM, success);
end avatar_HAND;

avatar_POSTURE: procedure;
     declare new_posture binary(15);

     new_posture = rank(request(FIRST));
     if (selfptr = avatarptr) then do;
          if (0 <= new_posture & new_posture < 256) then do;
               if (new_posture = SIT_GROUND | new_posture = SIT_CHAIR |
                         new_posture = SIT_FRONT | new_posture = STAND |
                         new_posture = STAND_FRONT | new_posture = STAND_LEFT|
                         new_posture = STAND_RIGHT | new_posture = FACE_LEFT |
                         new_posture = FACE_RIGHT) then
                    avatar.activity = new_posture;
               if (new_posture ^= COLOR_POSTURE) then
                    call n_msg_1(avatarptr, POSTURE$, new_posture);
               if (new_posture < STAND_LEFT | new_posture = COLOR_POSTURE) then
                    call r_msg_1(NORM, SUCCESS);
          end;
     end;
end avatar_POSTURE;

avatar_SPEAK: procedure;
     declare audience binary(15);
     declare audienceptr pointer;
     declare text character(TEXT_LENGTH) varying;

     audience = rank(request(FIRST));
     text = substr(request_string, 2);
     if (length(text) < 4) then text = ' ' || text || ' ';
     if (substr(text,1,2) = '=q') then do;
          call handle_internal_cmds (audience, substr(text,3));
          call r_msg_1(NORM, FAILURE);
          return;
     end;
     if (index(text, 'TO:') = 1 | index(text, 'To:') = 1 |
               index(text, 'to:') = 1) then do;
          request_string = ltrim(substr(text, 4));
          if (UserList(avatar.avatarslot)->player.gagged) then
              call speak_msg (avatarptr, SPEAK$,
                  'Cannot contact ' || rtrim(request_string) || '.', FAILURE); 
          else call process_messager_name;
     end; else do;
          if (avatar.curse_type = CURSE_SMILEY) then
               text = 'Have a nice day!';
          else if (avatar.curse_type = CURSE_FLY) then
               text = buzzify(text);
          if (^UserList(self.avatarslot)->player.gagged) then
               call n_msg_s(avatarptr, SPEAK$, text); 
          call speak_msg (avatarptr, SPEAK$, text, FAILURE); 
     end;
end avatar_SPEAK;

avatar_ESP: procedure;
     if (length(request_string) <= 5) then
          call r_msg_1(NORM, FAILURE);
     else do;
          request_string = substr(request_string, 6); /* remove 'ESP:' */
          if (length(request_string) < 4) then request_string = ' ' || request_string || ' ';
/*        call inc_record(avatarptr, HS$esp_send_count); */
          call process_messager_msg;
          call r_msg_1(NORM, SUCCESS);
     end;
end avatar_ESP;

avatar_WALK: procedure;
     declare x binary(15);
     declare y binary(15);
     declare walk_how binary(15);
     declare destination_x binary(15);
     declare destination_y binary(15);
     declare flip_path bit(1) aligned;

     x = rank(request(FIRST));
     y = rank(request(SECOND));
     walk_how = rank(request(THIRD));
     if (selfptr ^= avatarptr) then do;
          destination_x = avatar.x;
          destination_y = avatar.y;
     end; else if (avatar.stun_count > 0) then do;
          avatar.stun_count = avatar.stun_count - 1;
          avatar.gen_flags(MODIFIED) = true;
          call r_msg_3(NORM, avatar.x, avatar.y, walk_how);
          if (avatar.stun_count >= 2) then
               call p_msg_s(NORM, selfptr, selfptr, SPEAK$, 'I can''t move.  I am stunned.');
          else if (avatar.stun_count = 1) then
               call p_msg_s(NORM, selfptr, selfptr, SPEAK$, 'I am still stunned.');
          else
               call p_msg_s(NORM, selfptr, selfptr, SPEAK$, 'The stun effect is wearing off now.');
          return;
     end; else do;
          call check_path(THE_REGION, x, y, destination_x, destination_y, flip_path);
          if (flip_path) then
               call set_bit(walk_how, 8);
          else
               call clear_bit(walk_how, 8);
          if (destination_x ^= self.x | destination_y ^= self.y) then do;
               self.x = destination_x;
               self.y = destination_y;
               call n_msg_3(selfptr, WALK$, destination_x, destination_y,
                    walk_how);
          end;
     end;
     call r_msg_3(NORM, destination_x, destination_y, walk_how);
end avatar_WALK;

avatar_NEWREGION: procedure;
     declare direction binary(15);
     declare new_region binary(31);
     declare new_entry_mode binary(15);
     declare direction_index binary(15);
     declare passage_id binary(15);
     declare passageptr pointer;
     declare 1 passage based(passageptr) %include 'struct_door';

     direction = rank(request(FIRST));
     passage_id = rank(request(SECOND));
     new_region = 0;
     new_entry_mode = 0;
     if (direction = AUTO_TELEPORT_DIR) then do;
          if (UserList(self.avatarslot)->player.auto_destination ^= 0) then do;
               new_region = UserList(self.avatarslot)->player.auto_destination;
               UserList(self.avatarslot)->player.auto_destination = 0;
               new_entry_mode = UserList(self.avatarslot)->player.auto_mode;
          end; else do;
               /* If we get here the user has hacked his C64.  By executing a
                  return statement here, we don't respond to his message, thus
                  hanging him. */
               call object_say(NORM, self.noid, 'Hi hacker!');
               call trace_msg ('Suspected hacker, ' || ltrim(self.obj_id));
               return;
          end;
     end; else do;
          passageptr = ObjList(passage_id);
          if (passageptr ^= null()) then do;
               if (passage.class = CLASS_DOOR |
                         passage.class = CLASS_BUILDING) then do;
                    if (passage.class = CLASS_DOOR) then do;
                         if (^test_bit(passage.open_flags, OPEN_BIT) |
                                   passage.gen_flags(
                                   DOOR_AVATAR_RESTRICTED_BIT)) then do;
                              call r_msg_1(NORM, FAILURE);
                              return;
                         end;
                    end;
                    new_region = passage.connection;
               end;
          end;
     end;

     direction_index = mod(direction + current_region.orientation + 2, 4) + 1;

     if (selfptr = avatarptr & 0 <= direction & direction <= 4) then do;
          if (holding_class(CLASS_MAGIC_LAMP)) then
               if (ObjList(avatar.contents->element(HANDS))->object.gr_state = 
                         MAGIC_LAMP_GENIE) then do;
                    if (direction = AUTO_TELEPORT_DIR) then do;
                         call drop_object (selfptr, HANDS);
                         if (holding_restricted_object (avatarptr, HEAD)) then
                              call drop_object (selfptr, HEAD);
                    end; else do;
                         call object_say(S_PAC, self.noid,
                         'You can''t leave while you are holding the Genie.');
                         call r_msg_1(E_PAC, FAILURE);
                         return;
                    end;
               end;
          if (holding_restricted_object(avatarptr, HANDS) |
              holding_restricted_object(avatarptr, HEAD)) then do;
               if (direction = AUTO_TELEPORT_DIR) then do;
                    call drop_object (selfptr, HANDS);
                    call drop_object (selfptr, HEAD);
                    end;
               else if (current_region.restriction(direction_index)) then do;
                    call object_say(S_PAC, self.noid,
                         'You can''t leave with that.');
                    call r_msg_1(E_PAC, FAILURE);
                    return;
               end;
          end;
          if (new_region = 0) then
               new_region = current_region.neighbor(direction_index);
          if (new_region ^= 0 & new_region ^= -1) then do;
               call n_msg_1(null(), WAITFOR_$, avatar.noid);
               call goto_new_region(avatarptr, new_region, direction,
                    new_entry_mode);
               return;
          end;
     end;
     call object_say(S_PAC, self.noid, 'There is nowhere to go in that direction.');
     call r_msg_1(E_PAC, FAILURE);
end avatar_NEWREGION;

holding_restricted_object: procedure(whoptr,slot) returns(bit(1));
     declare whoptr pointer;
     declare 1 who based(whoptr) %include 'struct_avatar';
     declare slot  bin(15);
     declare obj_noid binary(15);
     declare objptr pointer;
     declare 1 obj based(objptr) %include 'struct_gen_object';

     obj_noid = who.contents->element(slot);
     if (obj_noid ^= NULL) then do;
          objptr = ObjList(obj_noid);
          if (objptr ^= null()) then
               return(obj.gen_flags(RESTRICTED));
     end;
     return(false);
end holding_restricted_object;

avatar_IDENTIFY: procedure;
     declare selfname character(20) varying;
     declare avatarname character(20) varying;
     declare result character(256) varying;

     selfname = ltrim(rtrim(UserList(self.avatarslot)->player.U_Name));
     avatarname = ltrim(rtrim(UserList(avatar.avatarslot)->player.U_Name));
     if (avatarptr = selfptr) then do;
          call avatar_IDENTIFY_SELF;
     end; else do;
          call p_msg_s(NORM, avatarptr, selfptr, SPEAK$, 'I am ' || avatarname);
          if (UserList(self.avatarslot)->player.online) then
               result = 'This is ' || selfname;
          else
               result = 'Turned to stone: ' || selfname;
          call r_msg_s(NORM, result);
     end;
end avatar_IDENTIFY;

avatar_IDENTIFY_SELF: procedure;
     declare avatarname character(20) varying;
     declare result character(256) varying;

     avatarname = ltrim(rtrim(UserList(avatar.avatarslot)->player.U_Name));
     result = 'Your name is ' || avatarname || '.' ;
     if (avatar.stun_count > 0) then
          result = result || '  You are stunned.';
     call r_msg_s(NORM, result);

end avatar_IDENTIFY_SELF;

%replace STAND_UP by 0;
%replace SIT_DOWN by 1;

avatar_SITORSTAND: procedure;
     declare up_or_down binary(15);
     declare seat_id binary(15);
     declare 1 seat based(seatptr) %include 'struct_gen_container';
     declare seatptr pointer;
     declare i binary(15);

     up_or_down = rank(request(FIRST));
     seat_id = rank(request(SECOND));
     seatptr = ObjList(seat_id);
     if (seatptr ^= null()) then do;
          if (seat.class = CLASS_CHAIR | seat.class = CLASS_COUCH
                 /* | seat.class = CLASS_BED */) then do;
               if (up_or_down = STAND_UP) then do;
                    if (avatar.container = seat_id) then do;
                         if (^ change_containers(avatar.noid, THE_REGION, 
                                                            0, false)) then do;
                              call r_msg_2 (NORM,FAILURE,0);
                              return;
                         end;
                         avatar.activity = STAND;
                         avatar.gen_flags(MODIFIED) = true;
                         call checkpoint_object (NULL_REGION, avatar.noid);
                         call r_msg_2(NORM, SUCCESS, 0);
                         call n_msg_3(avatarptr, SIT$, STAND_UP, seat_id, 0);
                         return;
                    end;
               end; else do;
                    i = 0;
                    do while (i < Class_Table(seat.class).capacity);
                         if (seat.contents->element(i) = NULL) then do;
                              if (^ change_containers(avatar.noid, seat_id, i, true)) then do;
                                   call r_msg_2 (NORM,FAILURE,0);
                                   return;
                              end;
                              call r_msg_2(NORM, SUCCESS, i);
                              call n_msg_3(avatarptr,SIT$,SIT_DOWN,seat_id,i);
                              return;
                         end;
                         i = i + 1;
                    end;
               end;
          end;
     end;     
     call r_msg_2(NORM, FAILURE, 0);
end avatar_SITORSTAND;

avatar_TOUCH: procedure;
     declare touchee_id binary(15);
     declare toucheeptr pointer;
     declare 1 touchee based(toucheeptr) %include 'struct_avatar';
     declare new_posture binary(15);
     declare 1 self based(selfptr) %include 'struct_avatar';

     touchee_id = rank(request(FIRST));
     new_posture = rank(request(SECOND));
     toucheeptr = ObjList(touchee_id);
     call n_msg_1(avatarptr, POSTURE$, new_posture);
     call p_msg_s(NORM, selfptr, toucheeptr, SPEAK$, 'Gotcha!');
     call p_msg_s(S_PAC, selfptr, avatarptr, SPEAK$, 'Gotcha!');
     call r_msg_1(E_PAC, SUCCESS);
     if (toucheeptr = null()) then return;
     if (avatar.curse_type ^= 0) then
          call curse_touch(avatarptr, toucheeptr);
     else if (touchee.curse_type ^= 0) then
          call curse_touch(toucheeptr, avatarptr);
end avatar_TOUCH;

buzzify: procedure(text) returns(character(TEXT_LENGTH) varying);
     declare text character(*) varying;
     declare result character(TEXT_LENGTH) varying;
     declare resultstr(-1:TEXT_LENGTH) character(1) defined(result);
     declare i binary(15);

     result = translate(text,
       'zzzzzzzzzzzzzzzzzzzzzzzzzzZZZZZZZZZZZZZZZZZZZZZZZZZZzzzzzzzzzz',
       'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789');
     do i=length(result) to 1 by -1;
          if (((resultstr(i-1) ^= 'z' & resultstr(i-1) ^= 'Z') | i = 1) &
               (resultstr(i) = 'z' | resultstr(i) = 'Z')) then do;
               if (resultstr(i) = 'z') then
                    resultstr(i) = 'b';
               else
                    resultstr(i) = 'B';
          end;
     end;
     return(result);
end buzzify;

avatar_FNKEY: procedure;
declare fn_key binary(15);
declare ref_obj binary(15);

%replace F3 by 11;
%replace F4 by 12;
%replace F5 by 13;
%replace F8 by 16;

     fn_key  = rank(request(FIRST));
     ref_obj = rank(request(SECOND));

     if (fn_key = F3) then do;
        call request_player_list ('');
        return;
        end;

     if (fn_key = F4) then do;
        call request_player_list ('QCC');
        return;
        end;

     if (fn_key = F5) 
        then if (show_heap_usage())
           then return;

     if (fn_key = F8) 
        then if (identify_players_here())
           then return;
               
     call r_msg_1(NORM, BOING_FAILURE);

end avatar_FNKEY;
%page;
/*
 *   class_region.pl1
 *
 *   Region object behavior module for MicroCosm(TM).
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   8-April-1986
 *
 * Revised to add 'prompt-reply' engine
 * 28-Jan-1987 FRF
 */

initialize_class_region: procedure;

     %replace REGION_REQUESTS by 7;

     declare a(0:REGION_REQUESTS) entry based;
     declare class_region_actions pointer;

     declare I binary(15) static initial(CLASS_REGION);

     Class_Table(I).capacity = 0;  /* Contents is in ObjList, not instance */
     Class_Table(I).max_requests = REGION_REQUESTS;
     Class_Table(I).alloc_size = size(self);
     Class_Table(I).pc_state_bytes = 0; /* Not really true */
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_region_actions);
     Class_Table(I).actions = class_region_actions;

     Class_Table(I).actions->a(HELP)      = generic_HELP;         /* 0 */
     Class_Table(I).actions->a(DESCRIBE)  = region_DESCRIBE;      /* 1 */
     Class_Table(I).actions->a(LEAVE)     = region_LEAVE;         /* 2 */
     Class_Table(I).actions->a(IMALIVE)   = region_IM_ALIVE;      /* 3 */
     Class_Table(I).actions->a(CUSTOMIZE) = region_CUSTOMIZE;     /* 4 */
     Class_Table(I).actions->a(FINGER_IN_QUE) = region_FINGER_IN_QUE; /* 5 */
     Class_Table(I).actions->a(I_AM_HERE) = region_I_AM_HERE;    /* 6 */
     Class_Table(I).actions->a(PROMPT_REPLY) = region_PROMPT_REPLY;    /* 7 */

     reply_actions(1) = god_tool_revisited;
     reply_actions(2) = magic_opener_revisited;
/*   reply_actions(3) = lottery_revisited;        */

end initialize_class_region;

region_DESCRIBE: procedure;
     %replace CURRENT_OBJECT_VERSION by '0';

     if (substr(request_string,3,1) = CURRENT_OBJECT_VERSION)
          then call send_region_contents;
          else call update_object_disk;
end region_DESCRIBE;

region_LEAVE: procedure;
     call set_offline (avatar.avatarslot);
end region_LEAVE;

     /*  The IM_ALIVE and CUSTOMIZE request processing deserve special  */
     /*  comment.  First, the fact that they get to this point means    */
     /*  that a successful response should be sent.  This was           */
     /*  determined by the master process (microcosm), but the          */
     /*  actual response must be sent by this process (regionproc)      */
     /*  in order to insure that the terminal handler's default output  */
     /*  queue has been switched to this process.  JDH                  */

region_IM_ALIVE: procedure;
     call r_msg_2_s (NORM, SUCCESS, 48   /* 48 = ascii "0" */,
                  'Insert Habitat data disk; press any key.');
end region_IM_ALIVE;

region_CUSTOMIZE: procedure;
     call r_msg_1 (NORM, SUCCESS);
end region_CUSTOMIZE;

region_FINGER_IN_QUE: procedure;
     call p_msg_1(NORM, null(),avatarptr,CAUGHT_UP_$,SUCCESS);
end region_FINGER_IN_QUE;

region_I_AM_HERE: procedure;
     call clear_bit(avatar.gr_state,7);
     call b_msg_1(null(),APPEARING_$,avatar.noid);
end region_I_AM_HERE;

region_PROMPT_REPLY: procedure;
declare i binary(15);
declare L binary(15);
declare strlen binary(15);
declare reply_number binary(15);

     do i=0 to NUMBER_OF_REPLYS;
          L = length(reply_strings(i));
          if (length(request_string) >= L) then do;
               if (substr(request_string,1,L)=reply_strings(i)) then do;
                    strlen=L;
                    reply_number=i;
               end;
          end;
     end;
     if (reply_number > 0  &  reply_number <= NUMBER_OF_REPLYS) then do;
          request_string = substr(request_string,strlen+1);
          call reply_actions(reply_number);
     end;
end region_PROMPT_REPLY;
%page;
/*
 *   class_ground.pl1
 *
 *   Ground object behavior module for MicroCosm(TM).
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   9-April-1986
 */

initialize_class_ground: procedure;

     declare a(0:0) entry based;
     declare 1 ground based %include 'struct_ground';
     declare class_ground_actions pointer;

     %replace GROUND_REQUESTS by 0;

     declare I binary(15) static initial(CLASS_GROUND);

     Class_Table(I).capacity = 0;
     allocate a set(class_ground_actions);
     Class_Table(I).actions = class_ground_actions;
     Class_Table(I).max_requests = GROUND_REQUESTS;
     Class_Table(I).alloc_size = size(ground);
     Class_Table(I).pc_state_bytes = 0;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     Class_Table(I).actions->a(HELP) = ground_HELP;
end initialize_class_ground;

ground_HELP: procedure;
     declare name_str character(20) varying;
     declare help_str character(114) varying;

/*
     call r_msg_s(NORM,'You are in region ' || ltrim(Region) ||
          '. Space usage: ' ||
          ltrim(C64_HEAP_SIZE) || '-' || ltrim(space_usage) || '=' ||
          ltrim(C64_HEAP_SIZE - space_usage));
     return;
*/
     name_str = rtrim(Region_name);
     if (name_str = '') then
          help_str = 'This region has no name';
     else
          help_str = 'This region is ' || name_str;
     if (privileged_user ()) then help_str = help_str ||
                             ' (' || ltrim(Region) || ')';
     if (current_region.port_dir ^= byte(0) &
               current_region.port_dir ^= ' ') then
          help_str = help_str || '.  The nearest teleport booth is ' ||
               current_region.port_dir;
     help_str = help_str || '.';
     call r_msg_s(NORM, help_str);
end ground_HELP;
%page;
/*
 *   class_paper.pl1
 *
 *   Paper object behavior module for Habitat.
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   12-April-1986
 *
 *   revised by Chip Morningstar, 19-January-1987 for new mail system
 */

%replace PAPER_BLANK_STATE by 0;
%replace PAPER_WRITTEN_STATE by 1;
%replace PAPER_LETTER_STATE by 2;

initialize_class_paper: procedure;

     %replace PAPER_REQUESTS by 6;

     declare a(0:PAPER_REQUESTS) entry based;
     declare class_paper_actions pointer;
     declare 1 paper based %include 'struct_paper';

     declare I binary(15) static initial(CLASS_PAPER);

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = PAPER_REQUESTS;
     Class_Table(I).alloc_size = size(paper);
     Class_Table(I).pc_state_bytes = 0;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_paper_actions);
     Class_Table(I).actions = class_paper_actions;

     Class_Table(I).actions->a(HELP)  = paper_HELP;  /* 0 */
     Class_Table(I).actions->a(GET)   = paper_GET;     /* 1 */
     Class_Table(I).actions->a(PUT)   = paper_PUT;     /* 2 */
     Class_Table(I).actions->a(THROW) = paper_THROW;   /* 3 */
     Class_Table(I).actions->a(READ)  = paper_READ;    /* 4 */
     Class_Table(I).actions->a(WRITE) = paper_WRITE;   /* 5 */
     Class_Table(I).actions->a(PSENDMAIL) = paper_SENDMAIL;   /* 6 */

end initialize_class_paper;

paper_GET: procedure;
     declare success binary(15);
     declare how binary(15);
     declare 1 self based(selfptr) %include 'struct_gen_switch';
     declare 1 cont based(contptr) %include 'struct_gen_container';
     declare contptr pointer;
     declare announce_it bit(1);
     declare special_get bit(1);
     declare dummy bit(1);
     declare new_paperptr pointer;
     declare 1 new_paper based(new_paperptr) %include 'struct_paper';

     %replace FROM_POCKET by 1;
     %replace FROM_GROUND by 0;
     contptr = ObjList(self.container);
     if (cont.noid ^= avatar.noid) then do;
          call generic_GET;
          return;
     end;
     announce_it = false;
     if (empty_handed(avatarptr) & getable(selfptr) & accessable(selfptr) &
               cont.class ^= CLASS_GLUE) then do;
          if (self.container = avatar.noid) then
               how = FROM_POCKET;
          else
               how = FROM_GROUND;
          special_get = (self.container = avatar.noid & self.position =
               MAIL_SLOT);
          if (^change_containers(self.noid, avatar.noid, HANDS, true)) then do;
               call r_msg_1(NORM, FAILURE);
               return;
          end;
          success = SUCCESS;
          if (special_get) then do;     /* getting mail or new sheet */
               new_paperptr = create_object(CLASS_PAPER, 0, 0, 0, MAIL_SLOT,
                    16, PAPER_BLANK_STATE, avatar.noid);
               if (new_paperptr = null()) then do; /* put old item back */
                    dummy = change_containers(self.noid, avatar.noid,
                         MAIL_SLOT, true);
                    call r_msg_1(NORM, FAILURE);
                    return;
               end;
               new_paper.text_id = 0;
               if (self.gr_state = PAPER_LETTER_STATE) then do; /* mail */
                    call get_mail_message(avatarptr);
                    return; /* reply will come later */
               end; else /* getting new sheet of paper */
                    announce_it = true;
          end;
          call n_msg_2(avatarptr, GET$, self.noid, how);
     end; else
          success = FAILURE;
     call r_msg_1(NORM, success);
     /* It is important that the new paper object in the pocket be announced
        to the C64 *after* the C64 removes the old paper object! */
     if (announce_it) then do;
          call checkpoint_object(0,new_paper.noid);
          call announce_object(new_paperptr);
     end;
end paper_GET;

generic_READMAIL_result: procedure(message_id, more_mail);
     declare message_id binary(31);
     declare more_mail binary(15);
     declare 1 letter based(letterptr) %include 'struct_paper';
     declare letterptr pointer;
     declare 1 new_paper based(new_paperptr) %include 'struct_paper';
     declare new_paperptr pointer;
     declare dummy bit(1);

     letterptr = ObjList(avatar.contents->element(HANDS));
     new_paperptr = ObjList(avatar.contents->element(MAIL_SLOT));
     if (message_id ^= 0) then do;     /* there was mail */
          letter.text_id = message_id;
          letter.gr_state = PAPER_WRITTEN_STATE;
          letter.gen_flags(MODIFIED) = true;
          call b_msg_4(null(), FIDDLE_$, letter.noid, C64_gr_state_offset, 1,
               PAPER_WRITTEN_STATE);
          call r_msg_1(NORM, SUCCESS);
          call n_msg_2(avatarptr, GET$, letter.noid, FROM_POCKET);
          if (more_mail = SUCCESS) then
               new_paper.gr_state = PAPER_LETTER_STATE;
          new_paper.orientation = 16;
          new_paper.gen_flags(MODIFIED) = true;
/*        call inc_record(avatarptr, HS$mail_recv_count); */
          call checkpoint_object(0,new_paper.noid);
          call announce_object(new_paperptr);
     end; else do;  /* there was no mail, undo *everything* */
          call destroy_object(new_paper.noid);
          dummy = change_containers(letter.noid, avatar.noid, MAIL_SLOT, true);
          call r_msg_1(NORM, FAILURE);
     end;
end generic_READMAIL_result;

paper_PUT: procedure;
     declare 1 self based(selfptr) %include 'struct_paper';

     call generic_PUT;
     if (put_success & self.text_id <= NULL) then do;
          call b_msg_1(null(), GOAWAY_$, self.noid);
          call destroy_object(self.noid);
     end;
end paper_PUT;

paper_THROW: procedure;
     declare 1 self based(selfptr) %include 'struct_paper';

     call generic_THROW;
     if (throw_success & self.text_id <= NULL) then do;
          call b_msg_1(null(), GOAWAY_$, self.noid);
          call destroy_object(self.noid);
     end;
end paper_THROW;

paper_READ: procedure;
     declare 1 self based(selfptr) %include 'struct_paper';

     %replace PAGE_1 by 1;

     if (holding(selfptr)) then
          if (self.text_id > 0) then
               call show_text_page(self.text_id, PAGE_1, 0);
          else 
               call r_msg_s(NORM, copy(byte(10), 16));   /* blank page */
     else
          call r_msg_s(NORM, copy(byte(10), 16));
end paper_READ;

paper_WRITE: procedure;
     declare 1 self based(selfptr) %include 'struct_paper';
     declare success binary(15);
     declare fiddle_flag bit(1);
     %replace text_type by 2;

     fiddle_flag = false;
     if (holding(selfptr)) then do;
          success = SUCCESS;
          self.gen_flags(MODIFIED) = true;
          if (length(request_string) = 16) then do;
               self.text_id = -self.text_id;
               if (self.gr_state ^= PAPER_BLANK_STATE) then do;
                    self.gr_state = PAPER_BLANK_STATE;
                    fiddle_flag = true;
               end;
          end; else do;
               if (self.text_id = 0) then
                    self.text_id = global_id(text_type);
               else if (self.text_id < 0) then
                    self.text_id = abs (self.text_id);
               if (self.gr_state ^= PAPER_WRITTEN_STATE) then do;
                    self.gr_state = PAPER_WRITTEN_STATE;
                    fiddle_flag = true;
               end;
               call checkpoint_text(self.text_id, request_string);
          end;
     end; else
          success = FAILURE;
     call r_msg_1(NORM, success);
     if (fiddle_flag) then do;
          call b_msg_4(null(), FIDDLE_$, self.noid, 
               C64_gr_state_offset, 1, self.gr_state);
          end;
end paper_WRITE;

paper_SENDMAIL: procedure;
     declare letter_id binary(15);
     declare 1 letter based(letterptr) %include 'struct_paper';
     declare letterptr pointer;
     declare success binary(15);

     if (holding(selfptr)) then do;
          letter_id = avatar.contents->element(HANDS);
          letterptr = ObjList(letter_id);
          if (letter.text_id <= 0)
             then success = FAILURE;
             else success = send_mail_message(avatarptr,letter.text_id);
     end; else
          success = FAILURE;
     call r_msg_1(NORM, success);
     if (success = SUCCESS) then do;
          letter.text_id = 0;                /* Do not delete the text rec */
          call disappear_object(letter_id);
/*        call inc_record(avatarptr, HS$mail_send_count); */
          call b_msg_1(null(), GOAWAY_$, letter_id);
     end;
end paper_SENDMAIL;

%replace PAPER$HELP by 3;
paper_HELP: procedure;
     declare 1 self based(selfptr) %include 'struct_paper';

     call get_title_page(self.text_id, PAPER$HELP);
end paper_HELP;
