%replace true                           by   '1'b;
%replace false                          by   '0'b;

%replace SUCCESS                        by      1;
%replace FAILURE                        by      0;
%replace ASYNC_header                   by    250;

%replace wait_forever                   by     -1;
%replace Separation_Char                by    144;
%replace e$invalid_eventid              by   1183;

%replace max_stratus_msg                by    256;

%replace DEBUGGING            by '1'b;

declare  c$attach_link        entry (char(*) var, char(*) var, bin(15), bin(15));
declare  s$allocate           entry (bin(31), pointer);
declare  s$free               entry (pointer);
declare  s$int_date_time      entry (bin(31));
declare  s$get_random_number  entry (bin(31));
declare  s$keyed_read         entry (bin(15), char(*)var, char(*)var, bin(15),
                                     bin(15), char(*), bin(15));
declare  s$open               entry (bin(15), bin(15), bin(15), bin(15),
                                     bin(15), bin(15), char(32)var, bin(15));
declare  s$parse_command      entry (char(*)var, bin(15),
                                     char(*)var, bit(1) aligned,
                                     char(*)var);
declare  s$seq_delete         entry (bin(15), bin(15));
declare  s$seq_read           entry (bin(15), bin(15), bin(15), char(*), bin(15));
declare  s$seq_rewrite        entry (bin(15), bin(15), char(*), bin(15));
declare  s$seq_write          entry (bin(15), bin(15), char(*), bin(15));
declare  s$set_task_wait_info entry (bin(31), bin(15), bin(15), bin(15));
declare  s$task_setup_wait    entry (bin(31), bin(15), bin(15), bin(31),
                                     bin(31), bin(31), bin(15), bin(15));
declare  s$task_wait_event    entry (bin(31), bin(31), bin(15), bin(31),
                                     bin(15), bin(31), bin(31), bin(15));


%nolist;  %include 'Messages.incl.pl1';        %list;
%nolist;  %include 'Queues.incl.pl1';          %list;
%nolist;  %include 'Debug.incl.pl1';           %list;
%nolist;  %include 'Lists.incl.pl1';           %list;
%nolist;  %include 'Lists.strux.incl.pl1';     %list;
%nolist;  %include 'TimeAfterTime.incl.pl1';   %list;
%nolist;  %include 'Stat.strux.incl.pl1';      %list;

%nolist;  %include 'defs_class.incl.pl1';      %list;

declare BUGON                           bit(1) static external initial(false);
%page ;

declare  decode_string        entry (char(*) var);
declare  encode_string        entry (char(*) var, char(*) var);
declare  encode_byte          entry (bin(15)) returns (char(2) var);

%replace MAX_PROCESSES        by 32;
declare  object_id_array      fixed bin(15) external static;
declare  1 next(-1:MAX_PROCESSES-1) based(addr (object_id_array)),
           2 object_id             bin(31),
           2 text_id               bin(31);

declare  tot_users (no_summary_stats)   binary (15)   external; /* summ stats */
declare  tot_time  (no_summary_stats)   binary (31)   external; /* summ stats */

%replace server_event                   by    1;
%replace habitat_event                  by    2;
%replace tact_event                     by    3;
%replace obn_event                      by    4;
%replace super_event                    by    5;
%replace stat_event                     by    6;
%replace max_events                     by    6;

declare  MainQID                        binary(31) external static;
declare  MainQID_str                    character(4) defined (MainQID);
declare  MainQ                          pointer external initial(null()) ;
declare  HabitatQ                       pointer external initial(null()) ;
declare  SuperQ                         pointer external initial(null()) ;

declare  ec (64)                        binary (31)   static   external;
declare  ei (64)                        binary (31)   static   external;

declare shared_file_path                char(256) var external;
declare shared_file_port                bin(15) external;

declare Transactions                    pointer external initial(null());

declare prefix                          char(6) var external;
declare response                        char(2048) var external;
declare encoded                         char(2048) var external;

declare current_qid                     binary(15) external;
declare current_noid                    binary(15) external;
declare current_request                 binary(15) external;
declare current_header                  char(1) external;
declare request_string                  char(80) var external;

declare customization_vector            char(1024) var external;
declare random_seed                     binary(31) static;
declare 1 custom    based,
          2 user         bin(31),
          2 user_qid     bin(31),
          2 user_qptr    pointer,
          2 tries        bin(15),
          2 username     char(10),
          2 login_msg    char(10) var,
          2 db_error     bit(1);
%page;
   declare  (region_port,region_size)   external bin(15);
   declare  (avatar_port,avatar_size)   external bin(15);
   declare  (object_port,object_size)   external bin(15);
   declare  turf_port                   external bin(15);
   declare  ap                          external pointer;

   declare 1 region external,
   %include 'region';;
   declare region_buf char(1) defined(region);

   declare 1 avatar external,
   %include 'avatar';;
   declare avatar_buf char(1) defined(avatar);

   declare 1 props based(ap),
   %include 'avatar_props.incl.pl1';

   declare 1 object external,
   %include 'object';;
   declare object_buf char(1) defined(object);

%page ;
hatchery:  procedure  options (main);
   declare  event_index                 binary (15);
   declare  code                        binary (15);
   declare  index                       binary (15);
   declare  done                        bit     (1);
   declare  task                        binary (15);
   declare  event                       binary (31);
   declare  count                       binary (31);
   declare  status                      binary (31);

   call initialize_process;
   call initialize_shared_memory;

   do  while (true);
       call s$task_wait_event (Master_ei, wait_forever, task, event,
                               event_index, count, status, code);
       if (code ^= 0)  then
           do;
           call debug_msg (code, 'task_wait_event '  ||
                                 'task = '    ||  ltrim (task)  ||
                                 ' index = '  ||  ltrim (event_index));
           if (code = e$invalid_eventid   &
               task ^= 0   &   task ^= tact_event)  then
               do;
               call s$task_setup_wait (Master_ei, task, 0, tact_ei, tact_ec,
                                       wait_forever, index, code);
               if (code ^= 0)  then  call debug_msg (code, 'err task setup wait');
               end;
           end;

         else if (task = server_event)   then  call handle_msg;
         else if (task = habitat_event)  then  call resend_msg (HabitatQ);
         else if (task = super_event)    then  call resend_msg (SuperQ);
         else
           if (task = tact_event)      then
               do;
               call ProcessTact;
               call GetTactInfo (tact_ei, tact_ec);
               call s$task_setup_wait (Master_ei, tact_event, 1, tact_ei, tact_ec,
                                       wait_forever, index, code);
               if (code ^= 0)  then  call debug_msg (code, 'Tact task setup');
               end;
         else if (task = obn_event)   then  call resend_msg (Q_ptrs (event_index));
         else if (task = stat_event)  then  call resend_msg (stat_queue_ptr);
         else call trace_msg ('Unknown event ' || ltrim(task) || ' ignored.');
         end;

end hatchery;

%page ;
initialize_process:  procedure;
   declare  code         binary (15);
   declare  my_name      char(32) var;
   declare  my_type      bin(15);
   declare  habitat_log  bit(1) aligned;

   call s$parse_command ('hatchery', code,
                         'switch(-subsys_log),=1', habitat_log,
                         'end');
   if (code ^= 0)  then  call die_msg (code, 'bad paramter');

   if (habitat_log) then call set_debug_queue ('habitat_debug');
   call initialize_queues_and_tasks ('hatchery', MainQ,
                                     max_events, obn_event, tact_event);
   call GetQueueInformation (MainQ,my_name,MainQID,my_type);

   call make_sender_queue ('habitat',       habitat_event,  HabitatQ);
   call make_sender_queue ('SuperProcess',  super_event,    SuperQ);

   call open_habitat_files;
   ap = addr(avatar.profile);
   call s$int_date_time(random_seed);

%page;
   customization_vector = byte(0)   || byte(0)   || byte(32)  || byte(0)   ||
                          byte(1)   || byte(0)   || byte(0)   || byte(0)   ||
                          byte(0)   || 

/* (10) */                byte(1)   || byte(1)   || byte(2)   || byte(36)  ||
                          byte(3)   || byte(80)  || byte(4)   || byte(127) ||
                          byte(5)   || byte(127) || byte(6)   || byte(127) ||
                          byte(7)   || byte(127) || byte(8)   || byte(127) ||
                          byte(9)   || byte(127) || byte(10)  || byte(127) ||
                          byte(11)  || byte(127) || byte(0)   ||

/* (33) #1 (avatar) */    byte(0)   || byte(84)  || byte(144) || byte(2)   ||
                          byte(0)   || byte(0)   || byte(146) || byte(146) ||
                          byte(0)   || byte(0)   || byte(2)   || byte(52)  ||

/* (45) #2 (ground) */    byte(1)   || byte(0)   || byte(4)   || byte(228) ||
                          byte(0)   || byte(0)   ||

/* (51) #3 (wall) */      byte(4)   || byte(0)   || byte(0)   || byte(196) ||
                          byte(0)   || byte(0)   ||

/* (57) #4 (head) */      byte(1)   || byte(200) || byte(36)  || byte(16)  ||
                          byte(1)   || byte(0)   ||

/* (63) #5 (head) */      byte(2)   || byte(200) || byte(38)  || byte(16)  ||
                          byte(1)   || byte(0)   ||

/* (69) #6 (head) */      byte(3)   || byte(200) || byte(38)  || byte(16)  ||
                          byte(1)   || byte(0)   ||

/* (75) #7 (head) */      byte(4)   || byte(200) || byte(198) || byte(16)  ||
                          byte(1)   || byte(0)   ||

/* (81) #8 (head) */      byte(11)  || byte(200) || byte(36)  || byte(16)  ||
                          byte(1)   || byte(0)   ||

/* (87) #9 (head) */      byte(21)  || byte(200) || byte(37)  || byte(16)  ||
                          byte(1)   || byte(0)   ||

/* (93) #10 (head) */     byte(9)   || byte(200) || byte(60)  || byte(16)  ||
                          byte(1)   || byte(0)   ||

/* (99) #11 (head) */     byte(30)  || byte(200) || byte(36)  || byte(24)  ||
                          byte(1)   || byte(0)   ||

                          byte(0);

end  initialize_process;
%page;
handle_msg:  procedure;

declare event_index      binary (15);
declare mtype            binary (31);
declare len              binary (31);
declare uid              binary (31);
declare qid              binary (31);
declare sub_addr         binary (15);
declare code             binary (15);
declare buffer           character(1024) ;
declare obuf             character(1024) varying ;
declare f_cnt            binary (15);
declare f_list(6)        binary (15);

  do while (true);
     call get_sub_message (MainQ, event_index, mtype, buffer, length(buffer),
                           len, uid, qid, sub_addr, f_cnt, f_list);
     if (mtype = -1) then return;

     obuf = substr(buffer,1,len) ;

     if (mtype = message$terminal_message)
     then do ;
          call process_input (obuf, uid, qid) ; 
     end ;
     else if (mtype = msg$find_current_region)
     then do;
           call initiate_avatar_creation (addr(buffer));
     end;
     else if (mtype = message$user_unplugged)
     then do ;
          call process_unplugged (uid,qid) ;
     end ;
     else if (mtype = message$statflush)
     then do ;
          /* nothing */
     end ;
     else if (mtype = message$debug_msg)
     then do ;
          call debug_on (buffer,len) ;
     end ; 
     else do ; 
          call trace_msg (' Unknown msg type = '  ||  ltrim (mtype)  ||
                                       ' qid = '  ||  ltrim (qid));
     end;
     end;  /* of do while loop */

end handle_msg;
%page ;
process_input: procedure (str, uid, qid) ; 
declare str              character(*) varying ;
declare uid              binary (31);
declare qid              binary (31);
declare uno              binary (15);
declare command          binary (15);

declare 1 req            defined(str),
          2 char_cnt     bin(15),
          2 U_char       char(1),
          2 header       char(1),
          2 obj_id       char(1),
          2 function     char(1),
          2 parm1        char(1),
          2 parm2        char(1);
declare 1 hdr            defined(req.header),
          2 end_seq      bit(1),
          2 fill1        bit(1),
          2 start_seq    bit(1),
          2 fill2        bit(1),
          2 seq_number   bit(4);


     current_qid = qid;

     call decode_string (str);
     if (BUGON) then call trace_msg ('RCV: ' || str);

     if (req.U_char ^= 'U' & req.U_char ^= 'u') then do;
        call trace_msg ('Discarded-unknown request: ' || str);
        return;
        end;

     current_noid = rank(req.obj_id);
     if (current_noid ^= 0) then do;
        call trace_msg ('Bad object id: ' || string(current_noid));
        return;
        end;

     current_header  = req.header;
     current_request = rank(req.function);
     request_string  = substr(str,5);
     if (current_request = 4)
        then call process_customization (uid,qid);
     else call trace_msg ('Bad request: ' || string(current_request));

     return;

end process_input;
%page;
initiate_avatar_creation: procedure (buf);
declare buf pointer;
declare 1 buf_olay       based (buf),
          2 sub_account  bin(31),
          2 sub_qid      bin(31),
          2 version      bin(15),
          2 screen_name  char(10),
          2 login_msg    char(10) var;

declare sub_qptr    pointer;
declare tp          pointer;

   call open_queue_from_number (buf_olay.sub_qid,sub_qptr);
   if (sub_qptr = null()) then do;
      call trace_msg ('Unable to open queue for ' || ltrim(sub_account) ||
                      '/' || ltrim(sub_qid));
      return;
      end;

   /* Do a switch_queues so this process will be default output for user. */
   call send_message (sub_qptr,message$switch_queues,MainQID_str,4,0,sub_qid);

   prefix = substr(login_msg,1,2) || encode_byte(0) || encode_byte(3);
   call scramble_head_styles;
   response = byte(2) || customization_vector;
   call encode_string (response,encoded);
   call send_multiple_packets (sub_qptr,prefix,encoded);

   allocate custom set (tp);
   tp->custom.user      = sub_account;
   tp->custom.user_qid  = sub_qid;
   tp->custom.user_qptr = sub_qptr;
   tp->custom.tries     = 0;
   tp->custom.username  = buf_olay.screen_name;
   tp->custom.login_msg = buf_olay.login_msg;
   tp->custom.db_error  = false;

   call add_to_list (Transactions,tp);

end initiate_avatar_creation;
%page;
scramble_head_styles: procedure;
     declare (i, j) binary(15);
     declare done bit(1);
     declare random_head_list(0:7) character(1);
     %replace MALE_HEAD_COUNT by 14;
     declare allowed_male_heads(MALE_HEAD_COUNT) binary(15) static init(
          1, 3, 4, 5, 7, 9, 11, 25, 33, 41, 53, 68, 82, 83 );
     %replace FEMALE_HEAD_COUNT by 12;
     declare allowed_female_heads(FEMALE_HEAD_COUNT) binary(15) static init(
          2, 21, 30, 48, 56, 64, 65, 80, 84, 87, 89, 131 );
     %replace HEAD_STYLE_OFFSET by 57;

     do i = 0 to 3;
          done = false;
          do while (^done);
               call s$get_random_number(random_seed);
               j = mod(random_seed, binary(MALE_HEAD_COUNT, 31)) + 1;
               random_head_list(i) = byte(allowed_male_heads(j));
               done = true;
               do j = 0 to i - 1;
                    if (random_head_list(j) = random_head_list(i)) then
                         done = false;
               end;
          end;
          done = false;
          do while (^done);
               call s$get_random_number(random_seed);
               j = mod(random_seed, binary(FEMALE_HEAD_COUNT, 31)) + 1;
               random_head_list(i + 4) = byte(allowed_female_heads(j));
               done = true;
               do j = 4 to i + 3;
                    if (random_head_list(j) = random_head_list(i + 4)) then
                         done = false;
               end;
          end;
     end;
     do i = 0 to 7;
          substr(customization_vector, HEAD_STYLE_OFFSET + i*6, 1) =
               random_head_list(i);
     end;
end scramble_head_styles;
%page;
process_customization: procedure (uid,qid);
declare uid    bin(31);
declare qid    bin(31);
declare turf_region bin(31);
declare turf_mailbox bin(31);
declare tp     pointer;

declare 1 buff           ,
          2 region_id    bin(31),
          2 login_msg    char(10) var;
declare buffer_info      char(14) defined (buff);

   call get_transaction (qid,tp);
   if (tp = null()) then do;
      if (BUGON) then call trace_msg ('No transaction for ' || ltrim(uid));
      return;
      end;
   if (tp->custom.db_error = true) then do;
      if (BUGON) then call trace_msg ('***database inconsistent for ' ||
                                       ltrim(uid));
      return;
      end;

   if (^valid_responses(0)) then do;
      call send_error_response (tp,false);
      return;
      end;

   if (^ get_next_turf (turf_region ))                 then return;

   if (^ update_region_record (turf_region,tp))        then return;

   if (^ create_token_record (uid,tp))                 then return;
   if (^ create_paper_record (uid,tp))                 then return;

   if (^ create_head_record (uid,tp))                  then return;
   if (^ create_avatar_record (uid,turf_region,tp))    then return;

   buff.region_id   = turf_region;
   buff.login_msg   = 'U' || current_header || encode_byte(current_noid) ||
                      encode_byte(current_request);
   call send_message (HabitatQ, msg$current_region, buffer_info, 14, uid, qid);

   call delete_from_list (Transactions,tp);
   free tp->custom;

end process_customization;
%page;
valid_responses: procedure (dmy) returns (bit(1) aligned);
declare dmy bin(15);
declare head_style bin(15);

   head_style = rank(substr(request_string,1,1));
   return (true);
   if (head_style ^= 1  &  head_style ^= 2  &  head_style ^= 3  &
       head_style ^= 4  &  head_style ^= 9  &  head_style ^= 11  &
       head_style ^= 21 &  head_style ^= 30)
       then return (false);

   return (true);

end valid_responses;
%page;
get_next_turf: procedure ( new_region ) returns (bit(1) aligned);
declare new_region  bin(31);

declare (i,code)    bin(15);
declare bytes       bin(15);
declare next_set    char(80);
declare id_number   char(15) var;

   do i = 1 to 3;
      call s$seq_read (turf_port,80,bytes,next_set,code);
      if (code ^= 0) then do;
         call debug_msg (code,'read turf');
         goto try_again;
         end;
      call s$seq_delete (turf_port,code);
      id_number = rtrim(ltrim(substr(next_set,1,bytes)));
      code = verify (id_number,'0123456789');

      if (code ^= 0) then do;
         call trace_msg ('bad turf record: ' || id_number);
         goto try_again;
      end;

      new_region  = id_number;
      return (true);

try_again:
      end;

end get_next_turf;
%page;
update_region_record: procedure (region_id,ptr) returns(bit(1) aligned);
declare region_id   bin(31);
declare ptr         pointer;
declare bytes       bin(15);
declare code        bin(15);

   region.ident = region_id;
   call s$keyed_read (region_port,'ident','',region_size,bytes,region_buf,code);
   if (code ^= 0) then do;
      call debug_msg (code,'read region ' || ltrim(region_id));
      call send_error_response (ptr,false);
      return(false);
      end;

   region.owner_id = ptr->custom.user;

   call s$seq_rewrite (region_port,bytes,region_buf,code);
   if (code ^= 0) then do;
      call debug_msg (code,'update region ' || ltrim(region_id));
      call send_error_response (ptr,false);
      return(false);
      end;

   return(true);

end update_region_record;
%page;
create_head_record: procedure (uid,ptr) returns(bit(1) aligned);
declare uid    bin(31);
declare ptr    pointer;
declare i      bin(15);
declare code   bin(15);

   object.ident = global_id (1);

   object.class       = CLASS_HEAD;
   object.host        = uid;
   object.type        = 1;
   object.style       = rank(substr(request_string,1,1));
   object.orientation = rank(substr(request_string,2,1));

   object.x_pos       = 0;
   object.y_pos       = 6;
   object.graphic_st  = 0;
   object.graphic_wd  = 0;
   object.genl_flags  = copy (false,32);
   object.prop_length = 0;
   object.properties  = copy (byte(0),86);

   do i = 1 to 5;
     object.fillers(i) = 0;
     end;

   call s$seq_write (object_port,object_size,object_buf,code);
   if (code ^= 0) then do;
      call debug_msg (code,'write head object ' || ltrim(object.ident) ||
                      'for ' || ltrim(uid));
      call send_error_response (ptr,false);
      return(false);
      end;

   return(true);

end create_head_record;
%page;
create_avatar_record: procedure (uid,turf_region,ptr) returns(bit(1) aligned);
declare uid         bin(31);
declare turf_region bin(31);
declare ptr         pointer;
declare i           bin(15);
declare code        bin(15);
declare sname       char(10) var;
declare iname       char(10) var;

declare compress_name entry (char(*) var, char(*) var);

   avatar.ident       = uid;
   avatar.region      = turf_region;
   avatar.inside      = 0;
   avatar.x_pos       = 8;
   avatar.y_pos       = 128;
   avatar.home_turf   = turf_region;
   avatar.graphic_st  = 0;
   avatar.graphic_wd  = 8;
   avatar.orientation = rank(substr(request_string,3,1));
   avatar.test_group  = byte(0);
   avatar.filler      = copy(byte(0),26);
   avatar.style       = byte(0);
   avatar.genl_flags  = copy(false,32);
   avatar.profile     = copy(byte(0),100);

   avatar.screen_name = ptr->custom.username;
   sname = avatar.screen_name;
   call compress_name (sname,iname);
   avatar.name = iname;

   avatar.prof_length         = 46;
   props.activity             = 0;
   props.action               = 0;
   props.health               = 255;
   props.restrainer           = 0;
   props.customize(1)         = rank(substr(request_string,4,1));
   props.customize(2)         = rank(substr(request_string,5,1));
   props.customize(3)         = 0;
   props.bank_account_balance = 1900;
   props.turf                 = turf_region;
   props.stun_count           = 0;
   props.nitty_bits           = false;
   props.true_orientation     = avatar.orientation;
   props.true_head_style      = rank(substr(request_string,1,1));
   props.true_custom(1)       = props.customize(1);
   props.true_custom(2)       = props.customize(2);
   props.true_custom(3)       = props.customize(3);
   props.curse_type           = 0;
   props.curse_counter        = 0;

   call s$int_date_time (props.last_login);
   props.last_login = props.last_login - 90000; /* - 25 hrs so we count today */
                                                /* as new login in regionproc */

   call s$seq_write (avatar_port,avatar_size,avatar_buf,code);
   if (code ^= 0) then do;
      call debug_msg (code,'write avatar ' || ltrim(uid));
      call send_error_response (ptr,true);
      return(false);
      end;

   return(true);

end create_avatar_record;
%page;
create_token_record:          procedure( uid,ptr ) returns(bit(1) aligned);
     dcl   uid                bin(31);
     dcl   ptr                pointer;
     dcl   i                  bin(15);
     dcl   code               bin(15);

     object.ident = global_id (1);

     object.class       = CLASS_TOKENS;

     object.host        = uid;     /* Who contains it. */
     object.type        = 1;       /* He's an avatar.  */

     object.x_pos       = 0;
     object.y_pos       = 0; 
     object.style       = 0;
     object.orientation = 0;
     object.graphic_st  = 0; 
     object.graphic_wd  = 0;
     object.genl_flags  = copy (false,32);
     object.prop_length = 4;
     object.properties  = byte( 0 ) || byte( 100 ) || copy (byte(0),84);

     do i = 1 to 5;
        object.fillers(i) = 0;
        end;

     call s$seq_write (object_port,object_size,object_buf,code);
     if (code ^= 0) then do;
          call debug_msg( code,'write token object ' || ltrim(object.ident) ||
                          ' for ' || ltrim(uid) );
          call send_error_response( ptr,false );
          return( false );
     end;

     return( true );
end create_token_record;
%page;
create_paper_record:          procedure( uid,ptr ) returns(bit(1) aligned);
     dcl   uid                bin(31);
     dcl   ptr                pointer;
     dcl   i                  bin(15);
     dcl   code               bin(15);

     object.ident = global_id (1);

     object.class       = CLASS_PAPER;
     object.type        = 1;
     object.x_pos       = 0;
     object.y_pos       = 4;

     object.style       = 0;
     object.orientation = 16;
     object.graphic_st  = 0;
     object.graphic_wd  = 0;
     object.genl_flags  = copy (false,32);
     object.prop_length = 4;
     object.properties  = copy (byte(0),4) ||          /* Text_id field */
                          copy (byte(0),82);           /* not used      */

     do i = 1 to 5;
        object.fillers(i) = 0;
        end;

     call s$seq_write (object_port,object_size,object_buf,code);
     if (code ^= 0) then do;
          call debug_msg( code,'write mail rec ' || ltrim(object.ident) ||
                          ' for ' || ltrim(uid) );
          call send_error_response( ptr,false );
          return( false );
     end;

     return( true );
end create_paper_record;

%page;
send_error_response: procedure (ptr,flag);
declare ptr  pointer;
declare flag bit(1);

   ptr->custom.db_error = flag;
   ptr->custom.tries    = ptr->custom.tries + 1;

   response = 'U' || current_header || encode_byte(0) || encode_byte(4) ||
              encode_byte(0);
   call send_message (ptr->custom.user_qptr,message$normal,substr(response,1),
                      length(response),0,0);

   return;

end send_error_response;
%page;
global_id: procedure (which) returns(bin(31));

declare s$notify_path entry (char(256) var, bin(31), bin(15));
declare s$sleep       entry (bin(31), bin(15));

declare which       bin(15);
declare new_id      bin(31);
declare code        bin(15);

   new_id = next.object_id(-1);

   do while (new_id = 0);
      call s$notify_path (shared_file_path,0,code);
      if (code ^= 0) then call debug_msg (code,'trying to notify shared memory');
      call s$sleep (5,code);       /* sleep for 5/1024 of a second */
      new_id = next.object_id(-1);
      end;

   next.object_id(-1) = 0;

   call s$notify_path (shared_file_path,0,code);
   if (code ^= 0) then call debug_msg (code,'trying to notify shared memory');

   return (new_id);

end global_id;
%page;
get_transaction: procedure (qid,ptr);
declare qid         bin(31);
declare ptr         pointer;
declare le          pointer;
declare done        bit(1);

     le = Transactions;
     done = false;
     do while (^done & le ^= null());
        ptr = le->le_content;
        le = le->le_next;
        if (ptr->custom.user_qid = qid)
              then done = true;
     end ;

     if (^done) then do;
        if (BUGON) then call trace_msg ('*ERR - No transaction entry for ' || 
                   ltrim(qid));
        ptr = null();
        end;

end get_transaction;
%page;
send_multiple_packets: procedure (userq,prefix,info);
declare userq       pointer;
declare prefix      char(*) var;
declare info        char(*) var;

declare (first,sent,tobe_sent,maxdata,seg_len)    bin(15);
declare segment     char(256) var;

declare header_byte(4)  char(1) defined(prefix);  /* 2 c var len + 2nd byte */
declare header_bits(16) bit(1)  defined(header_byte(4));

   header_bits(1) = false;         /* END of sequence bit   */
   header_bits(2) = true;          /* Middle of sequence    */
   header_bits(3) = true;          /* START of sequence bit */

   sent      = 0;
   first     = 1;
   maxdata   = 119 - length(prefix);
   tobe_sent = length(info);

   do while (sent < tobe_sent);
      if ( (tobe_sent - sent) <= maxdata) then do;
         segment = substr(info,first);
         header_bits(1) = true;                      /* END of sequence bit   */
         if (BUGON) then call trace_msg ('SEND: ' || prefix || segment);
         call send_message(userq,message$normal,prefix || segment,
                           length(prefix)+length(segment),0,0);
         return;
         end;
      if (substr(info,(first+maxdata-1),1) = byte(93))
         then seg_len = maxdata - 1;
         else seg_len = maxdata;
      segment = substr(info,first,seg_len);
      first = first + seg_len;
      sent = sent + seg_len;
      if (BUGON) then call trace_msg ('SEND: ' || prefix || segment);
      call send_message(userq,message$normal,prefix || segment,
                        length(prefix)+length(segment),0,0);
      header_bits(3) = false;                        /* START of sequence bit */
      end;

end send_multiple_packets;
%page;
process_unplugged: procedure (uid,qid) ;
declare uid              binary (31);
declare qid              binary (31);
declare le               pointer;
declare ptr              pointer;

     if (BUGON) then call trace_msg ('Disconnect for ' || ltrim(uid) || '/' 
                                      || ltrim(qid));

     le = Transactions;
     do while (le ^= null());
        ptr = le->le_content;
        le  = le->le_next;
        if (ptr->custom.user_qid = qid) then do;
           call delete_from_list (Transactions,ptr);
           free ptr -> custom;
           end;
        end;

end process_unplugged ;
%page;
open_habitat_files: procedure;
declare code bin(15);
%replace implicit_lock   by 4;
%replace indexed_access  by 3;
%replace input_io        by 1;
%replace seq_org         by 3;
%replace sequential_access by 1;
%replace update_io       by 4;

     region_size = bytesize(region);
     avatar_size = bytesize(avatar);
     object_size = bytesize(object);

     call c$attach_link ('MC_region', 'MC_region', region_port, code);
     if (code ^= 0) then call die_msg (code, 'attach to MC_region');
     call s$open (region_port, seq_org, region_size, update_io, 
                  implicit_lock, indexed_access, 'ident', code);
     if (code ^= 0) then call die_msg (code, 'open of MC_region');

     call c$attach_link ('MC_avatar', 'MC_avatar', avatar_port, code);
     if (code ^= 0) then call die_msg (code, 'attach to MC_avatar');
     call s$open (avatar_port, seq_org, avatar_size, update_io, 
                  implicit_lock, indexed_access, 'ident', code);
     if (code ^= 0) then call die_msg (code, 'open of MC_avatar');

     call c$attach_link ('MC_object', 'MC_object', object_port, code);
     if (code ^= 0) then call die_msg (code, 'attach to MC_object');
     call s$open (object_port, seq_org, object_size, update_io, 
                  implicit_lock, indexed_access, 'ident', code);
     if (code ^= 0) then call die_msg (code, 'open of MC_object');

     call c$attach_link ('MC_turf', 'MC_turf', turf_port, code);
     if (code ^= 0) then call die_msg (code, 'attach to MC_turf');
     call s$open (turf_port, seq_org, 80, update_io, 
                  implicit_lock, sequential_access, '', code);
     if (code ^= 0) then call die_msg (code, 'open of MC_turf');

end open_habitat_files;
%page;
initialize_shared_memory: procedure;

dcl  s$attach_port            entry (char(32) var, char(256) var, bin (15),
                                     bin (15), bin (15));
dcl  s$connect_vm_region      entry (bin (15), bin (15), bin (15), bin (31),
                                     bin (15), bin (15), bin (15));
dcl  s$expand_path            entry (char(256) var, char(32) var, char(256) var,
                                     bin (15));
dcl  s$open                   entry (bin (15), bin (15), bin (15), bin (15),
                                     bin (15), bin (15), char(32) var, bin (15));

%replace DONT_HOLD                 by 0;
%replace FIXED_FILE                by 1;
%replace IMPLICIT_LOCKING          by 4;
%replace NO_COPY_ON_REF            by 0;
%replace ONE_PAGE                  by 1;
%replace STARTING_WITH_1ST         by 1;
%replace UPDATE_TYPE               by 4;
%replace VM_ACCESS_MODE            by 7;
%replace VM_READ_AND_WRITE_ACCESS  by 2;

declare code bin(15);

   call s$expand_path ('MC_object_ids', '', shared_file_path,code);
   if (code ^= 0) then call die_msg (code, 'expanding VM path');
   call s$attach_port ('', shared_file_path, DONT_HOLD, shared_file_port, code);
   if (code ^= 0) then call die_msg (code, 'attaching VM port');

   call s$open (shared_file_port, FIXED_FILE, 4096, UPDATE_TYPE,
               IMPLICIT_LOCKING, VM_ACCESS_MODE, '', code);
   if (code ^= 0) then call die_msg (code, 'open VM file');
   call s$connect_vm_region (shared_file_port, object_id_array,
               ONE_PAGE, STARTING_WITH_1ST,
               VM_READ_AND_WRITE_ACCESS, NO_COPY_ON_REF, code);
   if (code ^= 0) then call die_msg (code, 'connecting to VM region');

end initialize_shared_memory;
