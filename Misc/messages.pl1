/*
 *   messages.pl1
 *
 *   Procedures to send messages to the home system.
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   9-April-1986
 *
 */

%nolist; %include 'cc_sys_defs.incl.pl1';    %list;
%nolist; %include 'cc_sys_strux.incl.pl1';   %list;
%nolist; %include 'Messages';  %list;
%nolist; %include 'Queues';    %list;

%replace BUFLEN by 256;
declare msg_buffer(BUFLEN) character(1) static;
declare msg_buffer_string  character(BUFLEN) defined(msg_buffer);

declare encoded_buffer     character(BUFLEN) static;
declare encoded_length     binary(31) static;

/* The following should probably wind up in an include file eventually */
%replace MSG_BASE by 4;

%replace MCF$PACKED      by 1;
%replace MCF$START_PACK  by 2;
%replace MCF$END_PACK    by 3;


declare trace_msg entry(char(*) varying);
declare encode_buffer entry(character(*), binary(31), character(*),
     binary(31));
declare encode_string entry(character(*) varying, character(*) varying);
declare encode_byte entry(binary(15)) returns(character(2) varying);
declare send_multiple_packets entry(binary(15), character(*) varying,
     character(*) varying, binary(31), bit(1) aligned);
declare Build_Fan_List entry(binary(31), bit(1));


/*
 * n_msg -- Send a message to my neighbors.
 *
 */
n_msg_routines: procedure;
     declare arg_count static binary(15) init(0);
     declare to_objptr pointer;
     declare 1 to_obj based(to_objptr) %include 'struct_gen_object';
     declare message_number binary(15);
     declare arg1 binary(15);
     declare arg2 binary(15);
     declare arg3 binary(15);
     declare arg4 binary(15);
     declare arg5 binary(15);
     declare arg6 binary(15);
     declare args character(*) varying;
     declare argslot character(BUFLEN-MSG_BASE) defined(msg_buffer(MSG_BASE+1));

n_msg_3_s: entry(to_objptr, message_number, arg1, arg2, arg3, args);
     substr(argslot, 4) = args;
     arg_count = length(args);
     goto n_msg_3_arg;

n_msg_2_s: entry(to_objptr, message_number, arg1, arg2, args);
     substr(argslot, 3) = args;
     arg_count = length(args);
     goto n_msg_2_arg;

n_msg_1_s: entry(to_objptr, message_number, arg1, args);
     substr(argslot, 2) = args;
     arg_count = length(args);
     goto n_msg_1_arg;

n_msg_s: entry(to_objptr, message_number, args);
     substr(argslot, 1) = args;
     arg_count = length(args);
     goto n_msg_0_arg;

n_msg_6: entry(to_objptr, message_number, arg1, arg2, arg3, arg4, arg5, arg6);
     msg_buffer(MSG_BASE+6) = byte(arg6);
     arg_count = arg_count + 1;

n_msg_5: entry(to_objptr, message_number, arg1, arg2, arg3, arg4, arg5);
     msg_buffer(MSG_BASE+5) = byte(arg5);
     arg_count = arg_count + 1;

n_msg_4: entry(to_objptr, message_number, arg1, arg2, arg3, arg4);
     msg_buffer(MSG_BASE+4) = byte(arg4);
     arg_count = arg_count + 1;

n_msg_3: entry(to_objptr, message_number, arg1, arg2, arg3);
n_msg_3_arg:
     msg_buffer(MSG_BASE+3) = byte(arg3);
     arg_count = arg_count + 1;

n_msg_2: entry(to_objptr, message_number, arg1, arg2);
n_msg_2_arg:
     msg_buffer(MSG_BASE+2) = byte(arg2);
     arg_count = arg_count + 1;

n_msg_1: entry(to_objptr, message_number, arg1);
n_msg_1_arg:
     msg_buffer(MSG_BASE+1) = byte(arg1);
     arg_count = arg_count + 1;

n_msg_0: entry(to_objptr, message_number);
n_msg_0_arg:

     msg_buffer(1) = CC_TKN;
     msg_buffer(2) = byte(ASYNC_MSG);
     if (to_objptr = null()) then
          msg_buffer(3) = byte(THE_REGION);
     else
          msg_buffer(3) = byte(to_obj.noid);
     msg_buffer(4) = byte(message_number);
     call Build_Fan_List(current_qid, false);
     if (fan_cnt > 0) then do;
         call encode_buffer (msg_buffer_string, arg_count + MSG_BASE,
               encoded_buffer, encoded_length);
         call send_fan_message(fan_list, fan_cnt, message$normal, encoded_buffer,
               encoded_length, 0, 0);
         end;
     arg_count = 0;
     return;
end n_msg_routines;

/*
 * b_msg -- Send a message to everyone here.
 *
 */
b_msg_routines: procedure;
     declare arg_count static binary(15) init(0);
     declare to_objptr pointer;
     declare 1 to_obj based(to_objptr) %include 'struct_gen_object';
     declare message_number binary(15);
     declare arg1 binary(15);
     declare arg2 binary(15);
     declare arg3 binary(15);
     declare arg4 binary(15);
     declare arg5 binary(15);
     declare arg6 binary(15);
     declare arg7 binary(15);
     declare args character(*) varying;
     declare argslot character(BUFLEN-MSG_BASE) defined(msg_buffer(MSG_BASE+1));

b_msg_1_s: entry(to_objptr, message_number, arg1, args);
     substr(argslot, 2) = args;
     arg_count = length(args);
     goto b_msg_1_arg;

b_msg_s: entry(to_objptr, message_number, args);
     substr(argslot, 1) = args;
     arg_count = length(args);
     goto b_msg_0_arg;

b_msg_7: entry(to_objptr, message_number, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     msg_buffer(MSG_BASE+7) = byte(arg7);
     arg_count = arg_count + 1;
     
b_msg_6: entry(to_objptr, message_number, arg1, arg2, arg3, arg4, arg5, arg6);
     msg_buffer(MSG_BASE+6) = byte(arg6);
     arg_count = arg_count + 1;

b_msg_5: entry(to_objptr, message_number, arg1, arg2, arg3, arg4, arg5);
     msg_buffer(MSG_BASE+5) = byte(arg5);
     arg_count = arg_count + 1;

b_msg_4: entry(to_objptr, message_number, arg1, arg2, arg3, arg4);
     msg_buffer(MSG_BASE+4) = byte(arg4);
     arg_count = arg_count + 1;

b_msg_3: entry(to_objptr, message_number, arg1, arg2, arg3);
     msg_buffer(MSG_BASE+3) = byte(arg3);
     arg_count = arg_count + 1;

b_msg_2: entry(to_objptr, message_number, arg1, arg2);
     msg_buffer(MSG_BASE+2) = byte(arg2);
     arg_count = arg_count + 1;

b_msg_1: entry(to_objptr, message_number, arg1);
b_msg_1_arg:
     msg_buffer(MSG_BASE+1) = byte(arg1);
     arg_count = arg_count + 1;

b_msg_0: entry(to_objptr, message_number);
b_msg_0_arg:

     msg_buffer(1) = CC_TKN;
     msg_buffer(2) = byte(ASYNC_MSG);
     if (to_objptr = null()) then
          msg_buffer(3) = byte(THE_REGION);
     else
          msg_buffer(3) = byte(to_obj.noid);
     msg_buffer(4) = byte(message_number);
     call Build_Fan_List(current_qid, true);
     if (fan_cnt > 0) then do;
         call encode_buffer (msg_buffer_string, arg_count + MSG_BASE,
               encoded_buffer, encoded_length);
         if (encoded_length >= 120) then do;
             encoded_length = 119;
             if (substr(encoded_buffer,encoded_length,1) = byte(93))
                then encoded_length = 118;
             end;
         call send_fan_message(fan_list, fan_cnt, message$normal, encoded_buffer,
             encoded_length, 0, 0);
         end;
     arg_count = 0;
     return;
end b_msg_routines;

/*
 * p_msg -- Send a point-to-point message.
 *
 */
p_msg_routines: procedure;
     declare arg_count static binary(15) init(0);
     declare to_objptr pointer;
     declare 1 to_obj based(to_objptr) %include 'struct_gen_object';
     declare to_whomptr pointer;
     declare 1 to_whom based(to_whomptr) %include 'struct_avatar';
     declare message_number binary(15);
     declare arg1 binary(15);
     declare args character(*) varying;
     declare argslot character(BUFLEN-MSG_BASE) defined(msg_buffer(MSG_BASE+1));
     declare 1 receiver based(receiverptr) %include 'struct_user';
     declare receiverptr pointer;

     declare mcf binary(15);            /* message control flags */
     declare msg_flag(16) bit(1) defined(mcf);

p_msg_1_s: entry(mcf, to_objptr, to_whomptr, message_number, arg1, args);
     substr(argslot, 2) = args;
     arg_count = length(args);
     goto p_msg_1_arg;

p_msg_1_s_ghost: entry(mcf, to_objptr, message_number, arg1, args);
     substr(argslot, 2) = args;
     msg_buffer(MSG_BASE+1) = byte(arg1);
     arg_count = length(args) + 1;
     receiverptr = userptr;
     goto p_msg_body;

p_msg_s: entry(mcf, to_objptr, to_whomptr, message_number, args);
     substr(argslot, 1) = args;
     arg_count = length(args);
     goto p_msg_0_arg;

p_msg_1: entry(mcf, to_objptr, to_whomptr, message_number, arg1);
p_msg_1_arg:
     msg_buffer(MSG_BASE+1) = byte(arg1);
     arg_count = arg_count + 1;

p_msg_0: entry(mcf, to_objptr, to_whomptr, message_number);
p_msg_0_arg:

     if (to_whomptr = null()) then do;
         arg_count = 0;
         return;
         end;
     receiverptr = UserList(to_whom.avatarslot);

p_msg_body:
     if (^receiver.online) then do;
         arg_count = 0;
         return;
         end;

     msg_buffer(1) = CC_TKN;
     msg_buffer(2) = byte(ASYNC_MSG);
     if (to_objptr = null()) then
          msg_buffer(3) = byte(THE_REGION);
     else
          msg_buffer(3) = byte(to_obj.noid);
     msg_buffer(4) = byte(message_number);
     call encode_buffer (msg_buffer_string, arg_count + MSG_BASE,
          encoded_buffer, encoded_length);
     if (msg_flag(MCF$START_PACK)) then
          call start_packed_msg (receiver.U_Q, receiver.U_Id, receiver.U_Q_Id);
     if (msg_flag(MCF$PACKED)) then
          call send_tih_msg_packed (receiver.U_Q,
                                   substr(encoded_buffer,1,encoded_length));
     else
          call send_tih_msg (receiver.U_Q, 
                             substr(encoded_buffer,1,encoded_length));
     if (msg_flag(MCF$END_PACK)) then
          call force_packed_msg (receiver.U_Q);
     arg_count = 0;
     return;
end p_msg_routines;

/*
 * r_msg -- Send a response message.
 *
 */
r_msg_routines: procedure;
     declare arg_count binary(15) static init(0);
     declare arg1 binary(15);
     declare arg2 binary(15);
     declare arg3 binary(15);
     declare arg4 binary(15);
     declare arg5 binary(15);
     declare args character(*) varying;
     declare argslot character(BUFLEN-MSG_BASE) defined(msg_buffer(MSG_BASE+1));
     declare 1 receiver based(receiverptr) %include 'struct_user';
     declare receiverptr pointer;

     declare mcf binary(15);            /* message control flags */
     declare msg_flag(16) bit(1) defined(mcf);

r_msg_s: entry(mcf, args);
     substr(argslot, 1) = args;
     arg_count = length(args);
     goto r_msg_0_arg;

r_msg_1_s: entry(mcf, arg1, args);
     substr(argslot, 2) = args;
     arg_count = length(args);
     goto r_msg_1_arg;

r_msg_2_s: entry(mcf, arg1, arg2, args);
     substr(argslot, 3) = args;
     arg_count = length(args);
     goto r_msg_2_arg;

r_msg_3_s: entry(mcf, arg1, arg2, arg3, args);
     substr(argslot, 4) = args;
     arg_count = length(args);
     goto r_msg_3_arg;

r_msg_5: entry(mcf, arg1, arg2, arg3, arg4, arg5);
     msg_buffer(MSG_BASE+5) = byte(arg5);
     arg_count = arg_count + 1;

r_msg_4: entry(mcf, arg1, arg2, arg3, arg4);
     msg_buffer(MSG_BASE+4) = byte(arg4);
     arg_count = arg_count + 1;

r_msg_3: entry(mcf, arg1, arg2, arg3);
r_msg_3_arg:
     msg_buffer(MSG_BASE+3) = byte(arg3);
     arg_count = arg_count + 1;

r_msg_2: entry(mcf, arg1, arg2);
r_msg_2_arg:
     msg_buffer(MSG_BASE+2) = byte(arg2);
     arg_count = arg_count + 1;

r_msg_1: entry(mcf, arg1);
r_msg_1_arg:
     msg_buffer(MSG_BASE+1) = byte(arg1);
     arg_count = arg_count + 1;

r_msg_0_arg:

     receiverptr = userptr;
     msg_buffer(1) = CC_TKN;
     msg_buffer(2) = current_header;
     msg_buffer(3) = byte(self.noid);
     msg_buffer(4) = byte(current_request);
     call encode_buffer (msg_buffer_string, arg_count + MSG_BASE,
          encoded_buffer, encoded_length);
     if (msg_flag(MCF$START_PACK)) then
          call start_packed_msg (receiver.U_Q, receiver.U_Id, receiver.U_Q_Id);
     if (msg_flag(MCF$PACKED)) then
          call send_tih_msg_packed (receiver.U_Q,
                                    substr(encoded_buffer,1,encoded_length));
     else
          call send_tih_msg (receiver.U_Q,
                             substr(encoded_buffer,1,encoded_length));
     if (msg_flag(MCF$END_PACK)) then
          call force_packed_msg (receiver.U_Q);
     arg_count = 0;
end r_msg_routines;

/*
 * e_msg -- Send a message to everyone, excluding someone in particular.
 *
 */
e_msg_routines: procedure;
     declare 1 to_object based(to_objectptr) %include 'struct_gen_object';
     declare to_objectptr pointer;
     declare 1 exclude_whom based(exclude_whomptr) %include 'struct_avatar';
     declare exclude_whomptr pointer;
     declare arg_count binary(15) static init(0);
     declare message_number binary(15);
     declare arg1 binary(15);
     declare args character(*) varying;
     declare argslot character(BUFLEN-(MSG_BASE)) defined(msg_buffer(MSG_BASE+1));
     declare 1 nonreceiver based(nonreceiverptr) %include 'struct_user';
     declare nonreceiverptr pointer;

e_msg_s: entry(to_objectptr, exclude_whomptr, message_number, args);
     substr(argslot, 1) = args;
     arg_count = length(args);
     goto e_msg_0_arg;

e_msg_1: entry(to_objectptr, exclude_whomptr, message_number, arg1);
     msg_buffer(MSG_BASE+1) = byte(arg1);
     arg_count = arg_count + 1;
     argslot = args;

e_msg_0_arg:

     if (exclude_whomptr = null()) then do;
         arg_count = 0;
         return;
         end;

     nonreceiverptr = UserList(exclude_whom.avatarslot);
     msg_buffer(1) = CC_TKN;
     msg_buffer(2) = byte(ASYNC_MSG);
     if (to_objectptr = null()) then
          msg_buffer(3) = byte(THE_REGION);
     else
          msg_buffer(3) = byte(to_object.noid);
     msg_buffer(4) = byte(message_number);
     call Build_Fan_List(nonreceiver.U_Q_Id, false);
     if (fan_cnt > 0) then do;
         call encode_buffer (msg_buffer_string, arg_count + MSG_BASE, 
                             encoded_buffer, encoded_length);
         call send_fan_message(fan_list, fan_cnt, message$normal,
                               encoded_buffer, encoded_length, 0, 0);
         end;
     arg_count = 0;
     return;
end e_msg_routines;

send_bogus_track_sector_update: procedure(who_noid, track, sector, val);
     declare who_noid binary(15);
     declare track binary(15);
     declare sector binary(15);
     declare val binary(15);
     declare prefix character(6) varying;
     declare data character(516) varying;
     declare encoded_data character(516) varying;

     prefix = CC_TKN || byte(ASYNC_MSG);
/*   prefix = CC_TKN || byte(ASYNC_MSG) ||
          encode_byte(THE_REGION) || encode_byte(UPDATE$);  */
     data = encode_byte(track) || encode_byte(sector) || copy(encode_byte(val), 256);
/*     call encode_string(data, encoded_data);*/
     call send_multiple_packets(who_noid, prefix, data, 0, true);
end send_bogus_track_sector_update;

%replace IMALIVE by 3;
%replace NEWUSER by 2;

send_bogus_customize_response: procedure(who_noid);
     declare who_noid binary(15);
     call trace_msg ('Error: call to send_bogus_customize_response!!!');
end send_bogus_customize_response;

/*    Janet added from here...   */
speak_msg: procedure (to_objptr, message_number, text, status);
     declare to_objptr pointer;
     declare 1 to_obj based(to_objptr) %include 'struct_gen_object';
     declare message_number binary(15);
     declare text character(*) varying;
     declare status binary(15);
     declare argslot character(BUFLEN-MSG_BASE) defined(msg_buffer(MSG_BASE+1));
     declare 1 receiver based(receiverptr) %include 'struct_user';
     declare receiverptr pointer;

     substr(argslot, 1) = text;

     receiverptr = userptr;
     msg_buffer(1) = CC_TKN;
     msg_buffer(2) = byte(ASYNC_MSG);
     if (to_objptr = null()) then
          msg_buffer(3) = byte(THE_REGION);
     else
          msg_buffer(3) = byte(to_obj.noid);
     msg_buffer(4) = byte(message_number);
     call encode_buffer (msg_buffer_string, length(text) + MSG_BASE,
          encoded_buffer, encoded_length);

     call start_packed_msg (receiver.U_Q, receiver.U_Id, receiver.U_Q_Id);

     call send_tih_msg_packed (receiver.U_Q,
                    substr(encoded_buffer,1,encoded_length));

     msg_buffer(MSG_BASE+1) = byte(status);

     msg_buffer(2) = current_header;
     msg_buffer(3) = byte(self.noid);
     msg_buffer(4) = byte(current_request);
     call encode_buffer (msg_buffer_string, MSG_BASE + 1,
          encoded_buffer, encoded_length);

     call send_tih_msg_packed (receiver.U_Q,
                    substr(encoded_buffer,1,encoded_length));
     call force_packed_msg (receiver.U_Q);

end speak_msg;
end_packed_msg: procedure;
     declare 1 receiver based(receiverptr) %include 'struct_user';
     declare receiverptr pointer;

     receiverptr = userptr;
     call force_packed_msg (receiver.U_Q);
end end_packed_msg;
